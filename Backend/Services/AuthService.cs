using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Security.Cryptography;
using System.Threading;
using MySql.Data.MySqlClient;
using Spectre.Console;

namespace BookStoreConsoleApp.Services
{
    public static class AuthService
    {
        public static void Register(string connectionString)
        {
            AnsiConsole.Clear();
            ShowTitle("üìù ƒêƒÇNG K√ù T√ÄI KHO·∫¢N M·ªöI", "magenta");

            AnsiConsole.MarkupLine("[grey]üí° Nh·∫•n [bold]Ctrl + Enter[/] b·∫•t k·ª≥ l√∫c n√†o ƒë·ªÉ quay v·ªÅ trang ch√≠nh.[/]");
            string fullName, email, password, phone, address;

            // H·ªç t√™n
            while (true)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üë§ Nh·∫≠p h·ªç t√™n: [/]");
                fullName = Console.ReadLine()?.Trim();
                if (!string.IsNullOrWhiteSpace(fullName)) break;
                ShowError("H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            // Email
            while (true)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üìß Nh·∫≠p email (abc@gmail.com): [/]");
                email = Console.ReadLine()?.Trim();
                if (Regex.IsMatch(email ?? "", @"^[\w\.-]+@gmail\.com$")) break;
                ShowError("Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.");
            }

            // M·∫≠t kh·∫©u
            while (true)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üîí Nh·∫≠p m·∫≠t kh·∫©u (8 k√Ω t·ª±, ch·ªØ hoa, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát): [/]");
                password = ReadPassword();
                if (Regex.IsMatch(password ?? "", @"^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$")) break;
                ShowError("M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: Pa$$w0rd");
            }

            // SƒêT
            while (true)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üì± Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (9-11 s·ªë): [/]");
                phone = Console.ReadLine()?.Trim();
                if (Regex.IsMatch(phone ?? "", @"^[0-9]{9,11}$")) break;
                ShowError("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.");
            }

            // ƒê·ªãa ch·ªâ
            while (true)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üè† Nh·∫≠p ƒë·ªãa ch·ªâ: [/]");
                address = Console.ReadLine()?.Trim();
                if (!string.IsNullOrWhiteSpace(address)) break;
                ShowError("ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            try
            {
                using var connection = new MySqlConnection(connectionString);
                connection.Open();

                var checkQuery = "SELECT COUNT(*) FROM customers WHERE Email = @Email";
                using var checkCmd = new MySqlCommand(checkQuery, connection);
                checkCmd.Parameters.AddWithValue("@Email", email);
                long exists = (long)checkCmd.ExecuteScalar();
                if (exists > 0)
                {
                    ShowError("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.");
                    PauseScreen();
                    return;
                }

                var hashed = HashPassword(password);
                string insertQuery = @"INSERT INTO customers 
                    (FullName, Email, Password, PhoneNumber, Address, Status, Is_admin, Canceled_orders, Total_orders)
                    VALUES (@FullName, @Email, @Password, @PhoneNumber, @Address, 0, 0, 0, 0)";
                using var cmd = new MySqlCommand(insertQuery, connection);
                cmd.Parameters.AddWithValue("@FullName", fullName);
                cmd.Parameters.AddWithValue("@Email", email);
                cmd.Parameters.AddWithValue("@Password", hashed);
                cmd.Parameters.AddWithValue("@PhoneNumber", phone);
                cmd.Parameters.AddWithValue("@Address", address);
                cmd.ExecuteNonQuery();

                ShowSuccess("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                ShowError($"L·ªói khi ƒëƒÉng k√Ω: {ex.Message}");
            }

            PauseScreen();
        }

        public static string? Login(string connectionString)
        {
            AnsiConsole.Clear();
            ShowTitle("üîë ƒêƒÇNG NH·∫¨P", "blue");
            AnsiConsole.MarkupLine("[grey]üí° Nh·∫•n [bold]Ctrl + Enter[/] ƒë·ªÉ quay v·ªÅ trang ch√≠nh.[/]");

            for (int attempt = 1; attempt <= 3; attempt++)
            {
                CheckExitShortcut();
                AnsiConsole.Markup("[cyan]üìß Email: [/]");
                string? email = Console.ReadLine()?.Trim();

                AnsiConsole.Markup("[cyan]üîí M·∫≠t kh·∫©u: [/]");
                var password = ReadPassword();
                var hashed = HashPassword(password);

                try
                {
                    using var connection = new MySqlConnection(connectionString);
                    connection.Open();

                    var query = "SELECT FullName, Is_admin FROM customers WHERE Email = @Email AND Password = @Password";
                    using var cmd = new MySqlCommand(query, connection);
                    cmd.Parameters.AddWithValue("@Email", email);
                    cmd.Parameters.AddWithValue("@Password", hashed);
                    using var reader = cmd.ExecuteReader();

                    if (reader.Read())
                    {
                        var name = reader.GetString("FullName");
                        int isAdmin = Convert.ToInt32(reader["Is_admin"]);

                        ShowSuccess("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
                        PauseScreen();
                        if (isAdmin == 1)
                        {
                            DashboardService.DisplayDashboard(connectionString);
                            return null;
                        }
                        else return name;
                    }
                }
                catch (Exception ex)
                {
                    ShowError($"L·ªói h·ªá th·ªëng: {ex.Message}");
                    return null;
                }

                ShowError($"‚ùå Sai th√¥ng tin. Th·ª≠ l·∫°i: {attempt}/3");
            }

            ShowError("‚õî ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau 3 l·∫ßn.");
            PauseScreen();
            return null;
        }

        public static void ShowUserInfo(string username, string connectionString)
        {
            ShowTitle("üë§ TH√îNG TIN T√ÄI KHO·∫¢N", "teal");

            try
            {
                using var connection = new MySqlConnection(connectionString);
                connection.Open();

                var query = "SELECT * FROM customers WHERE FullName = @FullName";
                using var cmd = new MySqlCommand(query, connection);
                cmd.Parameters.AddWithValue("@FullName", username);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    var panel = new Panel($"""
                    [bold yellow]üë§ H·ªç t√™n:[/] {reader["FullName"]}
                    [bold yellow]üìß Email:[/] {reader["Email"]}
                    [bold yellow]üì± SƒêT:[/] {reader["PhoneNumber"]}
                    [bold yellow]üè† ƒê·ªãa ch·ªâ:[/] {reader["Address"]}
                    [bold yellow]‚ùå ƒê∆°n hu·ª∑:[/] {reader["Canceled_orders"]}
                    [bold yellow]üì¶ T·ªïng ƒë∆°n:[/] {reader["Total_orders"]}
                    [bold yellow]üïí Ng√†y t·∫°o:[/] {reader["created_at"]}
                    """).Border(BoxBorder.Rounded).Header("üóÇÔ∏è H·ªì s∆° ng∆∞·ªùi d√πng");

                    AnsiConsole.Write(panel);
                }
                else
                {
                    ShowError("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
                }
            }
            catch (Exception ex)
            {
                ShowError($"L·ªói h·ªá th·ªëng: {ex.Message}");
            }

            PauseScreen();
        }

        private static void ShowTitle(string title, string color)
        {
            var rule = new Rule($"[{color} bold]{title}[/]").RuleStyle(color).LeftJustified();
            AnsiConsole.Write(rule);
        }

        private static void ShowSuccess(string msg) =>
            AnsiConsole.MarkupLine($"[bold green]{msg}[/]");

        private static void ShowError(string msg) =>
            AnsiConsole.MarkupLine($"[bold red]{msg}[/]");

        private static void CheckExitShortcut()
        {
            if (Console.KeyAvailable)
            {
                var key = Console.ReadKey(true);
                if (key.Modifiers.HasFlag(ConsoleModifiers.Control) && key.Key == ConsoleKey.Enter)
                {
                    AnsiConsole.Markup("[yellow]‚ùì B·∫°n mu·ªën quay l·∫°i trang ch√≠nh? (Y/N): [/]");
                    var confirm = Console.ReadKey(true);
                    if (confirm.Key == ConsoleKey.Y)
                    {
                        AnsiConsole.MarkupLine("\n[green]üëã ƒê√£ quay v·ªÅ trang ch√≠nh![/]");
                        PauseScreen();
                        Environment.Exit(0);
                    }
                    else
                    {
                        ShowSuccess("Ti·∫øp t·ª•c thao t√°c...");
                    }
                }
            }
        }

        private static void PauseScreen()
        {
            AnsiConsole.MarkupLine("[grey]‚è≥ Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...[/]");
            Console.ReadKey(true);
        }

        private static string ReadPassword()
        {
            string pwd = "";
            ConsoleKeyInfo key;
            do
            {
                key = Console.ReadKey(true);
                if (key.Key == ConsoleKey.Backspace && pwd.Length > 0)
                {
                    pwd = pwd[..^1];
                    Console.Write("\b \b");
                }
                else if (!char.IsControl(key.KeyChar))
                {
                    pwd += key.KeyChar;
                    Console.Write("*");
                }
            } while (key.Key != ConsoleKey.Enter);
            Console.WriteLine();
            return pwd;
        }

        private static string HashPassword(string password)
        {
            using var sha = SHA256.Create();
            var bytes = Encoding.UTF8.GetBytes(password);
            var hash = sha.ComputeHash(bytes);
            var sb = new StringBuilder();
            foreach (var b in hash) sb.Append(b.ToString("x2"));
            return sb.ToString();
        }
    }
}
