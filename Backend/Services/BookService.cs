using Spectre.Console;
using MySql.Data.MySqlClient;
using System;
using System.Text.RegularExpressions;

namespace BookStoreConsoleApp.Services
{
    public static class BookService
    {
        public static string? DisplayBookList(string connectionString, string? loggedInUserEmail)

        //public static void DisplayBookList(string connectionString, string? loggedInUserEmail)
        {
            const int pageSize = 10;
            int currentPage = 1;

            while (true)
            {
                Console.Clear();
                var table = new Table
                {
                    Border = TableBorder.Rounded,
                    Title = new TableTitle($"[yellow bold underline]\uD83D\uDCDA DANH S√ÅCH S√ÅCH ‚Äî TRANG {currentPage}[/]")
                };

                table.AddColumns("STT", "M√£ s√°ch", "T√™n s√°ch", "T√°c gi·∫£", "Gi√° (VNƒê)", "S·ªë l∆∞·ª£ng", "Th·ªÉ lo·∫°i", "M√¥ t·∫£");

                try
                {
                    using var connection = new MySqlConnection(connectionString);
                    connection.Open();

                    var offset = (currentPage - 1) * pageSize;
                    var query = @"
                        SELECT 
                            b.BookID, b.Title, b.Author, b.Price, b.Quantity, b.Description, 
                            c.Name AS CategoryName
                        FROM books b
                        LEFT JOIN categories c ON b.CategoryID = c.CategoryID
                        LIMIT @PageSize OFFSET @Offset";

                    using var cmd = new MySqlCommand(query, connection);
                    cmd.Parameters.AddWithValue("@PageSize", pageSize);
                    cmd.Parameters.AddWithValue("@Offset", offset);

                    using var reader = cmd.ExecuteReader();
                    int index = offset + 1;

                    while (reader.Read())
                    {
                        // table.AddRow(
                        //     index++.ToString(),
                        //     reader["BookID"].ToString(),
                        //     reader["Title"].ToString(),
                        //     reader["Author"].ToString(),
                        //     string.Format("{0:N0}", reader.GetDecimal("Price")),
                        //     reader["Quantity"].ToString(),
                        //     reader["CategoryName"]?.ToString() ?? "[grey italic]Ch∆∞a c√≥[/]",
                        //     reader["Description"].ToString()
                        // );
                        table.AddRow(
    $"[bold yellow]{index++}[/]",
    $"[cyan]{reader["BookID"]}[/]",
    $"[white]{reader["Title"]}[/]",
    $"[green]{reader["Author"]}[/]",
    $"[bold orange1]{string.Format("{0:N0}", reader.GetDecimal("Price"))}[/]",
    $"[purple]{reader["Quantity"]}[/]",
    reader["CategoryName"]?.ToString() != null
        ? $"[aqua]{reader["CategoryName"]}[/]"
        : "[grey italic]Ch∆∞a c√≥[/]",
    $"[grey]{reader["Description"]}[/]"
);

                    }

                    AnsiConsole.Write(table);

                    AnsiConsole.MarkupLine("\n[bold cyan]ƒêi·ªÅu h∆∞·ªõng:[/] ‚Üê [green]P[/]revious | [green]N[/]ext ‚Üí | [green]Q[/]uit | [green]B[/]uy | [green]S[/]earch");
                    AnsiConsole.Markup("[yellow]üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: [/]");

                    string? input = Console.ReadLine()?.Trim().ToLower();

                    switch (input)
                    {
                        case "n":
                            currentPage++;
                            break;

                        case "p":
                            if (currentPage > 1) currentPage--;
                            break;

                        case "b":
                            if (string.IsNullOrWhiteSpace(loggedInUserEmail))
                            {
                                var newEmail = HandleBookPurchase(connectionString, loggedInUserEmail);
                                if (!string.IsNullOrWhiteSpace(newEmail))
                                {
                                    loggedInUserEmail = newEmail;
                                }
                            }
                            if (!string.IsNullOrWhiteSpace(loggedInUserEmail))
                            {
                                HandleBookPurchase(connectionString, loggedInUserEmail);
                            }
                            break;

                        case "q":
                            var confirmQuit = AnsiConsole.Confirm("‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh√¥ng?");
                            if (confirmQuit)
                                return loggedInUserEmail;
                            break;
                        case "s":
                            {
                                SearchBooks(connectionString); // üëà G·ªçi h√†m t√¨m ki·∫øm
                                break;
                                // (C√°c case kh√°c gi·ªØ nguy√™n)
                            }

                        default:
                            AnsiConsole.MarkupLine("[red]‚ö† L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.[/]");
                            PauseScreen();
                            break;
                    }

                }
                catch (Exception ex)
                {
                    AnsiConsole.MarkupLine($"[red]‚ùå L·ªói truy v·∫•n:[/] {ex.Message}");
                    PauseScreen();
                    return loggedInUserEmail;
                }
            }
        }
        private static void SearchBooks(string connectionString)
        {
            Console.Clear();

            string keyword = AnsiConsole.Ask<string>("üîç Nh·∫≠p t√™n s√°ch ho·∫∑c t√™n th·ªÉ lo·∫°i c·∫ßn t√¨m:");

            var table = new Table
            {
                Border = TableBorder.Rounded,
                Title = new TableTitle($"[yellow bold underline]üîé K·∫æT QU·∫¢ T√åM KI·∫æM: {keyword}[/]")
            };

            table.AddColumns("STT", "M√£ s√°ch", "T√™n s√°ch", "T√°c gi·∫£", "Gi√° (VNƒê)", "S·ªë l∆∞·ª£ng", "Th·ªÉ lo·∫°i", "M√¥ t·∫£");

            try
            {
                using var connection = new MySqlConnection(connectionString);
                connection.Open();

                var query = @"
            SELECT 
                b.BookID, b.Title, b.Author, b.Price, b.Quantity, b.Description,
                c.Name AS CategoryName
            FROM books b
            LEFT JOIN categories c ON b.CategoryID = c.CategoryID
            WHERE b.Title LIKE @Keyword OR c.Name LIKE @Keyword";

                using var cmd = new MySqlCommand(query, connection);
                cmd.Parameters.AddWithValue("@Keyword", $"%{keyword}%");

                using var reader = cmd.ExecuteReader();
                int index = 1;

                while (reader.Read())
                {
                    table.AddRow(
                        index++.ToString(),
                        reader["BookID"].ToString(),
                        reader["Title"].ToString(),
                        reader["Author"].ToString(),
                        string.Format("{0:N0}", reader.GetDecimal("Price")),
                        reader["Quantity"].ToString(),
                        reader["CategoryName"]?.ToString() ?? "[grey italic]Ch∆∞a c√≥[/]",
                        reader["Description"].ToString()
                    );
                }

                if (index == 1)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p.[/]");
                }
                else
                {
                    AnsiConsole.Write(table);
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå L·ªói khi t√¨m ki·∫øm: {ex.Message}[/]");
            }

            PauseScreen();
        }

        private static string? HandleBookPurchase(string connectionString, string? loggedInUserEmail)

        {
            Console.Clear();

            if (string.IsNullOrWhiteSpace(loggedInUserEmail))
            {
                AnsiConsole.MarkupLine("\n[red bold]‚ö† B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s√°ch.[/]");
                var choice = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[yellow bold]üëâ Vui l√≤ng ch·ªçn thao t√°c:[/]")
                        .PageSize(3)
                        .HighlightStyle("green bold")
                        .AddChoices("üîê ƒêƒÉng nh·∫≠p", "üìù ƒêƒÉng k√Ω", "‚ùå H·ªßy"));

                switch (choice)
                {
                    case "üîê ƒêƒÉng nh·∫≠p":
                        return AuthService.Login(connectionString); // ‚ú® CH·ªà tr·∫£ v·ªÅ email
                    case "üìù ƒêƒÉng k√Ω":
                        AuthService.Register(connectionString);
                        return AuthService.Login(connectionString);
                    default:
                        return null;
                }
            }



            AnsiConsole.Markup("[yellow]üî¢ Nh·∫≠p m√£ s√°ch b·∫°n mu·ªën mua: [/] ");
            string bookId = Console.ReadLine()?.Trim() ?? "";

            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            var getBookCmd = new MySqlCommand("SELECT * FROM books WHERE BookID = @BookID", connection);
            getBookCmd.Parameters.AddWithValue("@BookID", bookId);
            using var reader = getBookCmd.ExecuteReader();

            if (!reader.Read())
            {
                AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi m√£ ƒë√£ nh·∫≠p.[/]");
                PauseScreen();
                return null;
            }

            string title = reader["Title"].ToString()!;
            string author = reader["Author"].ToString()!;
            string description = reader["Description"].ToString()!;
            decimal price = reader.GetDecimal("Price");
            int availableQty = reader.GetInt32("Quantity");

            if (availableQty <= 0)
            {
                AnsiConsole.MarkupLine("[red bold]‚ùå S√°ch ƒë√£ h·∫øt h√†ng. B·∫°n kh√¥ng th·ªÉ ƒë·∫∑t mua.[/]");
                PauseScreen();
                return null;
            }

            reader.Close();

            Console.Clear();
            AnsiConsole.Write(new Panel($@"
[green]üìó T√™n:[/] {title}
[blue]‚úçÔ∏è  T√°c gi·∫£:[/] {author}
[orange1]üí∞ Gi√°:[/] {price:N0} VNƒê
[purple]üì¶ S·ªë l∆∞·ª£ng c√≤n:[/] {availableQty}
[grey]üìÑ M√¥ t·∫£:[/] {description}
").Header("üîç Th√¥ng tin s√°ch").BorderColor(Color.Aqua));

            var confirm = AnsiConsole.Confirm("üõçÔ∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c ƒë·∫∑t mua cu·ªën s√°ch n√†y?");
            if (!confirm)
            {
                AnsiConsole.MarkupLine("[grey]‚ùé ƒê√£ h·ªßy giao d·ªãch.[/]");
                PauseScreen();
                return null;
            }

            int buyQty = AnsiConsole.Ask<int>("üõí Nh·∫≠p s·ªë l∆∞·ª£ng mu·ªën mua:");
            if (buyQty <= 0 || buyQty > availableQty)
            {
                AnsiConsole.MarkupLine("[red]‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° t·ªìn kho.[/]");
                PauseScreen();
                return null;
            }

            object? customerId;
            string defaultName = "", defaultPhone = "", defaultAddress = "", defaultAddressDetail = "";

            // Truy v·∫•n b·∫±ng Email (n·∫øu currentUsername th·ª±c ch·∫•t l√† email)
            using (var getCustomerCmd = new MySqlCommand(@"
    SELECT CustomerID, FullName, PhoneNumber, Address, AddressDetail 
    FROM customers 
    WHERE Email = @Email", connection))
            {
                getCustomerCmd.Parameters.AddWithValue("@Email", loggedInUserEmail); // currentUsername

                using var custReader = getCustomerCmd.ExecuteReader();
                if (custReader.Read())
                {
                    customerId = custReader["CustomerID"];
                    defaultName = custReader["FullName"].ToString() ?? "";
                    defaultPhone = custReader["PhoneNumber"].ToString() ?? "";
                    defaultAddress = custReader["Address"].ToString() ?? "";
                    defaultAddressDetail = custReader["AddressDetail"].ToString() ?? "";
                }
                else
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.[/]");
                    PauseScreen();
                    return null;
                }
            }


            string receiverName = AnsiConsole.Ask<string>($"üë§ T√™n ng∆∞·ªùi nh·∫≠n [grey italic](m·∫∑c ƒë·ªãnh: {defaultName})[/]:", defaultName);
            string phone;
            do
            {
                phone = AnsiConsole.Ask<string>($"üìû S·ªë ƒëi·ªán tho·∫°i [grey italic](m·∫∑c ƒë·ªãnh: {defaultPhone})[/]:", defaultPhone);
                if (!Regex.IsMatch(phone, @"^(0|\+84)\d{9,10}$"))
                    AnsiConsole.MarkupLine("[red]‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.[/]");
            } while (!Regex.IsMatch(phone, @"^(0|\+84)\d{9,10}$"));

            string address = AnsiConsole.Ask<string>($"üè† ƒê·ªãa ch·ªâ [grey italic](m·∫∑c ƒë·ªãnh: {defaultAddress})[/]:", defaultAddress);
            string addressDetail = AnsiConsole.Ask<string>($"üè† ƒê·ªãa ch·ªâ c·ª• th·ªÉ [grey italic](m·∫∑c ƒë·ªãnh: {defaultAddressDetail})[/]:", defaultAddressDetail);

            decimal total = price * buyQty;

            using var orderCmd = new MySqlCommand(@"
                INSERT INTO orders
                (CustomerID, PhoneNumber, ReceiverName, Address, AddressDetail, BookID, BookTitle, Quantity, TotalPrice, Status, PaymentStatus, CreatedAt, UpdatedAt)
                VALUES
                (@CustomerID, @Phone, @Receiver, @Address, @AddressDetail, @BookID, @Title, @Qty, @Total, 'ƒê√£ ƒë·∫∑t', 'Ch∆∞a thanh to√°n', NOW(), NOW())", connection);

            orderCmd.Parameters.AddWithValue("@CustomerID", customerId);
            orderCmd.Parameters.AddWithValue("@Phone", phone);
            orderCmd.Parameters.AddWithValue("@Receiver", receiverName);
            orderCmd.Parameters.AddWithValue("@Address", address);
            orderCmd.Parameters.AddWithValue("@AddressDetail", addressDetail);
            orderCmd.Parameters.AddWithValue("@BookID", bookId);
            orderCmd.Parameters.AddWithValue("@Title", title);
            orderCmd.Parameters.AddWithValue("@Qty", buyQty);
            orderCmd.Parameters.AddWithValue("@Total", total);

            try
            {
                orderCmd.ExecuteNonQuery();

                var updateQtyCmd = new MySqlCommand("UPDATE books SET Quantity = Quantity - @BuyQty WHERE BookID = @BookID", connection);
                updateQtyCmd.Parameters.AddWithValue("@BuyQty", buyQty);
                updateQtyCmd.Parameters.AddWithValue("@BookID", bookId);
                updateQtyCmd.ExecuteNonQuery();

                var updateOrderCountCmd = new MySqlCommand("UPDATE customers SET Total_orders = Total_orders + 1 WHERE CustomerID = @CustomerID", connection);
                updateOrderCountCmd.Parameters.AddWithValue("@CustomerID", customerId);
                updateOrderCountCmd.ExecuteNonQuery();

                // AnsiConsole.MarkupLine($"[green bold]‚úÖ ƒê·∫∑t mua th√†nh c√¥ng \"{title}\" ({buyQty} cu·ªën). T·ªïng ti·ªÅn: {total:N0} VNƒê[/]");
                AnsiConsole.Clear();
                AnsiConsole.Write(new Panel($@"
[green]üìó S√°ch:[/] {title}
[blue]üßæ M√£ s√°ch:[/] {bookId}
[orange1]üí∞ Gi√° / cu·ªën:[/] {price:N0} VNƒê
[purple]üì¶ S·ªë l∆∞·ª£ng mua:[/] {buyQty}
[cyan]üßÆ T·ªïng c·ªông:[/] {total:N0} VNƒê

[green]üë§ Ng∆∞·ªùi nh·∫≠n:[/] {receiverName}
[blue]üìû SƒêT:[/] {phone}
[orange1]üè† ƒê·ªãa ch·ªâ:[/] {address}
[grey]üè† C·ª• th·ªÉ:[/] {addressDetail}

[bold yellow]üïí Ng√†y ƒë·∫∑t:[/] {DateTime.Now:dd/MM/yyyy HH:mm}
").Header("[bold green]üßæ H√ìA ƒê∆†N ƒê·∫∂T H√ÄNG[/]").BorderColor(Color.Green));

            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå L·ªói khi ƒë·∫∑t h√†ng: {ex.Message}[/]");
            }

            PauseScreen();
            return loggedInUserEmail;

        }

        private static void PauseScreen()
        {
            AnsiConsole.MarkupLine("\n[grey]‚è≥ Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...[/]");
            try { Console.ReadKey(true); } catch { }
        }
    }
}
