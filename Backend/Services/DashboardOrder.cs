using System;
using MySql.Data.MySqlClient;
using Spectre.Console;

namespace BookStoreConsoleApp.Services
{
    public static class DashboardOrder
    {
        public static void ManageOrders(string connectionString)
        {
            while (true)
            {
                Console.Clear();
                // ‚úÖ S·ª≠a l·ªói: Kh√¥ng d√πng Styled n·ªØa, ch·ªâ t·∫°o FigletText v√† th√™m m√†u
                var title = new FigletText("Admin Panel")
                    .Centered();

                AnsiConsole.Write(title);

                AnsiConsole.MarkupLine("[cyan]1. Xem danh s√°ch ƒë∆°n h√†ng[/]");
                AnsiConsole.MarkupLine("[cyan]2. Xem chi ti·∫øt ƒë∆°n h√†ng[/]");
                AnsiConsole.MarkupLine("[cyan]3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n[/]");
                AnsiConsole.MarkupLine("[cyan]4. H·ªßy ƒë∆°n h√†ng[/]");
                AnsiConsole.MarkupLine("[cyan]5. Quay l·∫°i[/]");

                Console.Write("üîé Ch·ªçn ch·ª©c nƒÉng: ");
                var input = Console.ReadLine();

                switch (input)
                {
                    case "1":
                        DisplayOrderList(connectionString);
                        break;
                    case "2":
                        ViewOrderDetails(connectionString);
                        break;
                    case "3":
                        UpdateOrderStatus(connectionString);
                        break;
                    case "4":
                        CancelOrder(connectionString);
                        break;
                    case "5":
                        return;
                    default:
                        AnsiConsole.MarkupLine("[red]‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá![/]");
                        Thread.Sleep(1500);
                        break;
                }
            }
        }

        private static void DisplayOrderList(string connectionString)
        {
            Console.Clear();
            AnsiConsole.MarkupLine("[bold]üìã Danh s√°ch ƒë∆°n h√†ng:[/]");

            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            string query = @"
                SELECT OrderID, CustomerID, OrderDate, Status 
                FROM orders 
                ORDER BY OrderDate DESC";

            using var cmd = new MySqlCommand(query, connection);
            using var reader = cmd.ExecuteReader();

            var table = new Table().Border(TableBorder.Rounded);
            table.AddColumns("Order ID", "Customer ID", "Ng√†y ƒë·∫∑t", "Tr·∫°ng th√°i");

            while (reader.Read())
            {
                table.AddRow(
                    reader["OrderID"].ToString(),
                    reader["CustomerID"].ToString(),
                    reader["OrderDate"].ToString(),
                    GetStatusText(Convert.ToInt32(reader["Status"]))
                );
            }

            AnsiConsole.Write(table);
            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey();
        }

        private static void ViewOrderDetails(string connectionString)
        {
            Console.Write("üîç Nh·∫≠p ID ƒë∆°n h√†ng c·∫ßn xem: ");
            if (!int.TryParse(Console.ReadLine(), out int orderId)) return;

            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            string query = @"
                SELECT o.OrderID, o.CustomerID, o.OrderDate, o.Status,
                       c.FullName, c.Email
                FROM orders o
                JOIN customers c ON o.CustomerID = c.CustomerID
                WHERE o.OrderID = @OrderID";

            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@OrderID", orderId);
            using var reader = cmd.ExecuteReader();

            if (reader.Read())
            {
                Console.Clear();
                AnsiConsole.MarkupLine("[bold]üßæ Th√¥ng tin ƒë∆°n h√†ng:[/]");
                AnsiConsole.MarkupLine($"[yellow]Order ID:[/] {reader["OrderID"]}");
                AnsiConsole.MarkupLine($"[yellow]Kh√°ch h√†ng:[/] {reader["FullName"]} ({reader["Email"]})");
                AnsiConsole.MarkupLine($"[yellow]Ng√†y ƒë·∫∑t:[/] {reader["OrderDate"]}");
                AnsiConsole.MarkupLine($"[yellow]Tr·∫°ng th√°i:[/] {GetStatusText(Convert.ToInt32(reader["Status"]))}");
            }
            else
            {
                AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.[/]");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey();
        }

        private static void UpdateOrderStatus(string connectionString)
        {
            Console.Write("üîÑ Nh·∫≠p ID ƒë∆°n h√†ng c·∫ßn c·∫≠p nh·∫≠t: ");
            if (!int.TryParse(Console.ReadLine(), out int orderId)) return;

            Console.WriteLine("Ch·ªçn tr·∫°ng th√°i m·ªõi:");
            Console.WriteLine("1. Ch·ªù x·ª≠ l√Ω");
            Console.WriteLine("2. ƒêang giao");
            Console.WriteLine("3. Ho√†n t·∫•t");

            Console.Write("‚û°Ô∏è Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng: ");
            if (!int.TryParse(Console.ReadLine(), out int newStatus) || newStatus < 1 || newStatus > 3)
            {
                AnsiConsole.MarkupLine("[red]‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.[/]");
                return;
            }

            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            string query = "UPDATE orders SET Status = @Status WHERE OrderID = @OrderID";

            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@Status", newStatus);
            cmd.Parameters.AddWithValue("@OrderID", orderId);

            int rows = cmd.ExecuteNonQuery();
            if (rows > 0)
                AnsiConsole.MarkupLine("[green]‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng![/]");
            else
                AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.[/]");

            Thread.Sleep(1500);
        }

        private static void CancelOrder(string connectionString)
        {
            Console.Write("‚ùå Nh·∫≠p ID ƒë∆°n h√†ng c·∫ßn h·ªßy: ");
            if (!int.TryParse(Console.ReadLine(), out int orderId)) return;

            Console.Write("‚ö†Ô∏è B·∫°n ch·∫Øc ch·∫Øn mu·ªën h·ªßy? (y/N): ");
            var confirm = Console.ReadLine();
            if (!confirm?.Trim().Equals("y", StringComparison.OrdinalIgnoreCase) ?? true) return;

            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            string query = "UPDATE orders SET Status = 0 WHERE OrderID = @OrderID"; // 0 = h·ªßy
            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@OrderID", orderId);

            int rows = cmd.ExecuteNonQuery();
            if (rows > 0)
                AnsiConsole.MarkupLine("[green]üóëÔ∏è ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy![/]");
            else
                AnsiConsole.MarkupLine("[red]‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.[/]");

            Thread.Sleep(1500);
        }

        private static string GetStatusText(int status)
        {
            return status switch
            {
                0 => "[red]ƒê√£ h·ªßy[/]",
                1 => "[yellow]Ch·ªù x·ª≠ l√Ω[/]",
                2 => "[blue]ƒêang giao[/]",
                3 => "[green]Ho√†n t·∫•t[/]",
                _ => "[grey]Kh√¥ng x√°c ƒë·ªãnh[/]"
            };
        }
    }
}
